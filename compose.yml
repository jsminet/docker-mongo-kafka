services:
  traefik:
    image: traefik:v2.10.4
    ports:
      # Exposes port 80 for incomming web requests
      - 80:80
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - 8080:8080
      - 9092:9092
      - 27017:27017
      - 27027:27027
      - 27037:27037
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./app/traefik/conf/traefik.yml:/etc/traefik/traefik.yml

  mongodb-primary:
    container_name: mongodb-primary
    hostname: mongodb-primary
    image: docker.io/bitnami/mongodb:6.0.10
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=$MONGO_PRIMARY
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_USER
      - MONGODB_ROOT_PASSWORD
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.mongodb-primary.loadbalancer.server.port=27017"
      - "traefik.tcp.routers.mongodb-primary.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mongodb-primary.entrypoints=mongodb-primary"
    volumes:
      - mongodb_data:/data/db
      #- ./app/mongo/conf:/etc/mongo
      #- ./app/mongo/dump:/docker-entrypoint-initdb.d

  mongodb-secondary:
    container_name: mongodb-secondary
    hostname: mongodb-secondary
    image: docker.io/bitnami/mongodb:6.0.10
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=$MONGO_SECONDARY
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.mongodb-secondary.loadbalancer.server.port=27017"
      - "traefik.tcp.routers.mongodb-secondary.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mongodb-secondary.entrypoints=mongodb-secondary"

  mongodb-arbiter:
    container_name: mongodb-arbiter
    hostname: mongodb-arbiter
    image: docker.io/bitnami/mongodb:6.0.10
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=$MONGO_ARBITER_DNS
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.mongodb-arbiter.loadbalancer.server.port=27017"
      - "traefik.tcp.routers.mongodb-arbiter.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mongodb-arbiter.entrypoints=mongodb-arbiter"

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME
      - ME_CONFIG_MONGODB_ADMINPASSWORD
      - ME_CONFIG_MONGODB_URL
      - ME_CONFIG_MONGODB_ENABLE_ADMIN
      - ME_CONFIG_MONGODB_AUTH_USERNAME
      - ME_CONFIG_MONGODB_AUTH_PASSWORD
      - ME_CONFIG_BASICAUTH
      - ME_CONFIG_BASICAUTH_USERNAME
      - ME_CONFIG_BASICAUTH_PASSWORD
      - ME_CONFIG_REQUEST_SIZE
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.rule=Host(`$MONGO_EXPRESS_DNS`)"
      - "traefik.http.routers.mongo-express.entrypoints=web"
      - "traefik.http.routers.mongo-express.service=mongo-express"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"

  kafka:
    image: bitnami/kafka:3.5.1
    environment:
      - KAFKA_CFG_NODE_ID
      - KAFKA_CFG_PROCESS_ROLES
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
      - KAFKA_CFG_LISTENERS
      - KAFKA_CFG_ADVERTISED_LISTENERS
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.kafka.loadbalancer.server.port=9092"
      - "traefik.tcp.routers.kafka.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.kafka.entrypoints=kafka"
    volumes:
      - "kafka_data:/bitnami"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
      - SERVER_SERVLET_CONTEXT_PATH
      - DYNAMIC_CONFIG_ENABLED
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka-ui.rule=Host(`$KAFKA_UI_DNS`)"
      - "traefik.http.routers.kafka-ui.entrypoints=web"
      - "traefik.http.routers.kafka-ui.service=kafka-ui"
      - "traefik.http.services.kafka-ui.loadbalancer.server.port=8080"

  connect:
    image: debezium/connect
    ports:
      - 8083:8083
    environment:
     - BOOTSTRAP_SERVERS
     - GROUP_ID
     - CONFIG_STORAGE_TOPIC
     - OFFSET_STORAGE_TOPIC
     - STATUS_STORAGE_TOPIC
     - ENABLE_DEBEZIUM_KC_REST_EXTENSION
     - ENABLE_DEBEZIUM_SCRIPTING
     - CONNECT_REST_EXTENSION_CLASSES
     - CONNECT_TOPIC_CREATION_ENABLE 


  debezium-ui:
    image: debezium/debezium-ui
    environment:
     - KAFKA_CONNECT_URIS
     - DEPLOYMENT_MODE
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.debezium-ui.rule=Host(`$DEBEZIUM_UI_DNS`)"
      - "traefik.http.routers.debezium-ui.entrypoints=web"
      - "traefik.http.routers.debezium-ui.service=debezium-ui"
      - "traefik.http.services.debezium-ui.loadbalancer.server.port=8080"

volumes: 
  mongodb_data:
  kafka_data: